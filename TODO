# 探针安装
1. 通过脚本一键下载和解压，生成配置文件
2. 探针发送一个注册请求到远程管理节点，如果已经注册则跳过此步骤
如果有 Token，自动 Enroll，如果失败，手动待 Enroll

服务端分配节点到资源配置组，根据 Token 来自动分配。
服务端初始化相关配置信息，默认为基本的自己本节点的监控指标采集。

3. 正常采集数据，发送到远程管理节点
4. 处理后续的配置变更和升级


1.采集本机节点监控。
2.监控先入本地队列。

https://github.com/netdata/go.d.plugin/tree/master/modules/elasticsearch




Agent 职责
# 负责 Elasticsearch 进程的启动管理
# 负责 Elasticsearch 本地配置的更新
# 负责 Elasticsearch 监控的收集
# 负责 Elasticsearch 日志的收集
# 负责主机层面的 IO、CPU、流量的采集
# 负责流量压缩处理的能力
# 负责安全加密的通信能力

# Elasticsearch 只监听 127.0.0.1 ？
# 具备异步存储监控指标的能力
# 具备按需采集指标和日志的能力
# 具备多 Elasticsearch 实例管理的能力
# 具备 Elasticsearch CPU 资源限制管理的能力
# 具备容器实例部署管理的能力
# 具备配置同步管理的能力
# 具备本机极限压测管理的能力
# 具备 Elasticsearch 插件管理更新的能力
# 具备 Elasticsearch 数据批量迁移的能力
# 具备 Elasticsearch 请求定向投递缓存的能力


Agent 一键部署到各个 ES 服务器，自动获取 ES 进程信息，获取配置位置，es.yml\jvm.options\环境变量，启停脚本

远程加密拉取配置，用于查看配置，可以修改下发到远程节点，提供配置版本管理，可以回滚。


console 模式显示任务进度；
主备模式，切换任务；
集群模式、单机模式；


JAVA 动态配置的 SDK。


# 使用流程
- 给定一组 ES 节点
- 推送 Agent 到目标节点
- Agent 自动注册到 Console
- Console 查看监控信息


# 主机指标
比例：进程 CPU 利用率、Mem 利用率、Network 利用率、IO 利用率、磁盘利用率
数字：网络连接数、文件打开数、存储大小


# 告警集成
直接下发到采集端，达到阈值直接生成事件，忽略低于阈值的值，采集不到也是事件，采集恢复也是。

简化目标的健康状态，木桶短板原理，任意一个告警则变成告警。瓶颈也是。以历史发生过的最大值作为背景基准参考线。压测工具辅助。


# Elasticsearch 监控
可以保存集群每一个版本的元数据变化信息，方便追踪对比

## 集中采集
- 获取集群元数据和路由信息
http://localhost:9200/_cluster/state
http://localhost:9200/_cluster/state/version,nodes,master_node,routing_table
根据 version 来判断是否上报最新的数据，直接通过当前 Active 的主节点地址去取，避免不必要的转发。


# 分布式采集
- 采集各个节点的状态信息

## 元数据，基本不变，一般只需要采集一次
http://localhost:9200/_nodes/_local
只采集指定节点端口暴露出来的统计数据，避免分布式采集造成的数据超时
